## Задания:
1) Доработайте класс комплексного числа из прошлого 
занятия: переопределите математические 
операторы (__+, -, /, *, ==__), так, чтобы они
работали с другими комплексными и со стандартными
числами. Добейтесь правильной работы с комплексным 
числом функций `print()`, `abs()`, а также
реализуйте `getter` и `setter` 
с использованием декоратора `@property`. Добавьте 
выбросы исключений при некорректном использовании 
вашего числа, например: выбросом `ValueError` при вводе 
некорректных значений в `setter` класса, выбросом своего исключения в 
случае попытки перевода в экспоненциальную 
форму, когда это невозможно. Поверх напишите программу 
калькулятор, принимающую у пользователя два комплексных
числа и проводящую с ними арифметические операции на
выбор пользователя. Калькулятор должен уметь ловить и 
обрабатывать исключения, не роняя программу,
а объясняя пользователю, что пошло не так.
2) Реализуйте класс связного списка `LinkedList`. 
(Вам потребуется реализовать вспомогательный класс `Node`,
содержащий в себе ссылки на соседей, и свое значение. Тогда
сам список содержит в себе лишь ссылку на первую вершину,
и вспомогательные данные вроде текущей длины). Список 
должен поддерживать обращение по индексам, красиво печататься,
выдавать длину через `len()` и иметь работающие методы
`.pop()`, `.append()`. Также список должен поддерживать
итерацию по нему. *Можете также добавить `.insert()` и 
`.pop()` по индексу.
3) Реализовать структуру наследования классов 
геометрических фигур *shape*. Каждый 
класс должен обладать методами `.area()`_ и 
`.perimeter()` для вычисления площади и 
периметра соответственно, а также метод `__str__()`. Среди обязательных для 
реализации структур: круг, треугольник, 
прямоугольник, квадрат, ромб. Для простоты часть фигур
можно конструировать из точек, 
передающихся в порядке обхода фигуры по 
часовой стрелке.
